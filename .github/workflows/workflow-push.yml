name: push-backend

on:
  push:
    branches: 
      - 'master'
      - 'features/**'
      - 'releases/**'

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest

    steps:

    - name: Checkout code
      uses: actions/checkout@v2

    - name: Check existence input.yaml, Dockerfile and config.yaml 
      id: check_file
      uses: andstor/file-existence-action@v1
      with:
        files: "input.yaml, Dockerfile, config.yaml"
    - name: Files don't exist
      if: steps.check_file.outputs.files_exists == 'false'
      run: |
        echo "failed"
        exit 1
    
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch
    
    - name: Extract branch name for image tag
      run: |
        var="${{steps.extract_branch.outputs.branch}}"
        if grep -q "master" <<< "$var"; then
        echo "##[set-output name=branch-tag;]$(echo prod)"
        elif grep -q "features" <<< "$var"; then
        echo "##[set-output name=branch-tag;]$(IFS='/' read -r -a array <<< ${GITHUB_REF#refs/heads/} &&  echo ${array[-2]}-${array[-1]})"
        elif grep -q "releases" <<< "$var"; then
        echo "##[set-output name=branch-tag;]$(IFS='/' read -r -a array <<< ${GITHUB_REF#refs/heads/} &&  echo ${array[-2]}-${array[-1]})"
        fi      
      id: branch-tag

    - name: Setup Python
      uses: actions/setup-python@v2
      with: 
        python-version: "3.x"
    - run: pip install PyYAML
      name: Install py dependencies
    
    - name: Validation of config file
      run: python scripts/validation-config-file.py

    - name: Create outputs from config file
      run: |
        echo "##[set-output name=docker-backend-repo;]$(python scripts/create-outputs-from-config.py docker-backend-repo)"
        echo "##[set-output name=docker-frontend-repo;]$(python scripts/create-outputs-from-config.py docker-frontend-repo)"
        echo "##[set-output name=infrastructure-repo;]$(python scripts/create-outputs-from-config.py infrastructure-repo)"
        echo "##[set-output name=tier;]$(python scripts/create-outputs-from-config.py tier)"
        echo "##[set-output name=backup-input-repo;]$(python scripts/create-outputs-from-config.py backup-input-repo)"
        var="${{steps.extract_branch.outputs.branch}}"
        if grep -q "master" <<< "$var"; then
        echo "##[set-output name=default-input-flag;]$(python scripts/create-outputs-from-config.py default-input-prod)"
        elif grep -q "features" <<< "$var"; then
        echo "##[set-output name=default-input-flag;]$(python scripts/create-outputs-from-config.py default-input-release)"
        elif grep -q "releases" <<< "$var"; then
        echo "##[set-output name=default-input-flag;]$(python scripts/create-outputs-from-config.py default-input-feature)"
        fi
      id: from-config
    
    - name: Set environment variables
      uses: allenevans/set-env@v2.0.0
      with:
          DEFAULT_INPUT_FLAG: ${{ steps.from-config.outputs.default-input-flag}}
   
    - run: python scripts/validation-input-file.py
      name: Validation of input file
      
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v1
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
    - name: Login to DockerHub
      uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
      
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        push: true
        context: .
        file: ./Dockerfile
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ steps.from-config.outputs.docker-frontend-repo}}:${{ github.sha }}-${{steps.branch-tag.outputs.branch-tag}}, ${{ secrets.DOCKER_USERNAME }}/${{ steps.from-config.outputs.docker-frontend-repo}}:latest-${{steps.branch-tag.outputs.branch-tag}}
  
      
    - name: Trigger infrastructure repo workflow
      uses: benc-uk/workflow-dispatch@v1
      with:
        workflow: update-infrastructure
        ref: master
        inputs: '{"docker-image-tag" : "${{ github.sha }}-${{steps.branch-tag.outputs.branch-tag}}", "code-branch" : "${{steps.extract_branch.outputs.branch}}", "code-repo" : "${{ github.event.repository.name }}", "docker-frontend-repo" : "${{steps.from-config.outputs.docker-frontend-repo}}","docker-backend-repo" : "${{steps.from-config.outputs.docker-backend-repo}}", "tier" : "${{steps.from-config.outputs.tier}}", "default-input-flag" : "${{ steps.from-config.outputs.default-input-flag }}", "backup-input-repo" : "${{ steps.from-config.outputs.backup-input-repo }}"}'
        repo: ${{ github.repository_owner }}/${{ steps.from-config.outputs.infrastructure-repo }}
        token: ${{ secrets.PAT_TOKEN }}
      
